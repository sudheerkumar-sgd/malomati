import 'package:malomati/domain/entities/payslip_entity.dart';

class PayslipModel {
  bool? isSuccess;
  String? message;
  String? userName;
  var assignmentId;
  var personId;
  String? endDate;
  String? deptname;
  var organizationId;
  String? employeeNumber;
  String? fullName;
  String? dateStart;
  String? name;
  var workingDays;
  var basicSalary;
  var supplementaryAllowance;
  var qualificationAllowance;
  var childAllowance;
  var housingAllowance;
  var nationalAllowance;
  var jobNature;
  var costOfLivingAllowance;
  var actingAllowance;
  var furnitureAllowance;
  var schoolAllowance;
  var ticketAllowance;
  var performanceAllowance;
  var transportationAllowance;
  var socialAllowance;
  var overtimeMoney;
  var bonus;
  var otherAllowance;
  var missionAllowance;
  var missionLoan;
  var trainingCourseAllowance;
  var advancedLeaveSalary;
  var advancedLeaveSalaryRecovery;
  var employeePension;
  var disciplinaryActionsDeductions;
  var overtime;
  var gratuityAllowance;
  var scholarshipRecovery;
  var holdSalary;
  var releaseSalary;
  var genericReimbursements;
  var specialPrivilages;
  var netPay;
  var supplementaryAllowanceForDifferences;
  var unpaidLeaveDeduction;
  var otherDeductions;
  var advancedPaidSalaryRecovery;
  var housingDeductionRecurring;
  String? assignmentStatus;
  var totalDeduction;
  var totalEarning;
  String? payrollName;
  String? gradeName;
  String? assignmentCategory;
  String? employeeCategory;
  String? contractType;
  String? paymentMethod;

  PayslipModel();

  PayslipModel.fromJson(Map<String, dynamic> json) {
    isSuccess = json['IsSuccess'];
    message = json['Message'];
    userName = json['userName'];
    assignmentId = json['assignmentId'];
    personId = json['personId'];
    endDate = json['endDate'];
    deptname = json['deptname'];
    organizationId = json['organizationId'];
    employeeNumber = json['employeeNumber'];
    fullName = json['fullName'];
    dateStart = json['dateStart'];
    name = json['name'];
    workingDays = json['workingDays'];
    basicSalary = json['Basic_Salary'];
    supplementaryAllowance = json['Supplementary_Allowance'];
    qualificationAllowance = json['Qualification_Allowance'];
    childAllowance = json['Child_Allowance'];
    housingAllowance = json['Housing_Allowance'];
    nationalAllowance = json['National_Allowance'];
    jobNature = json['Job_Nature'];
    costOfLivingAllowance = json['Cost_of_Living_allowance'];
    actingAllowance = json['Acting_Allowance'];
    furnitureAllowance = json['Furniture_Allowance'];
    schoolAllowance = json['School_Allowance'];
    ticketAllowance = json['Ticket_Allowance'];
    performanceAllowance = json['Performance_Allowance'];
    transportationAllowance = json['Transportation_Allowance'];
    socialAllowance = json['Social_Allowance'];
    overtimeMoney = json['Overtime_Money'];
    bonus = json['Bonus'];
    otherAllowance = json['Other_Allowance'];
    missionAllowance = json['Mission_Allowance'];
    missionLoan = json['Mission_Loan'];
    trainingCourseAllowance = json['Training_Course_Allowance'];
    advancedLeaveSalary = json['Advanced_leave_salary'];
    advancedLeaveSalaryRecovery = json['Advanced_leave_salary_recovery'];
    employeePension = json['Employee_Pension'];
    disciplinaryActionsDeductions = json['Disciplinary_Actions_Deductions'];
    overtime = json['Overtime'];
    gratuityAllowance = json['Gratuity_Allowance'];
    scholarshipRecovery = json['Scholarship_Recovery'];
    holdSalary = json['Hold_Salary'];
    releaseSalary = json['Release_Salary'];
    genericReimbursements = json['Generic_Reimbursements'];
    specialPrivilages = json['Special_Privilages'];
    netPay = json['netPay'];
    supplementaryAllowanceForDifferences =
        json['Supplementary_Allowance_for_Differences'];
    unpaidLeaveDeduction = json['Unpaid_Leave_Deduction'];
    otherDeductions = json['Other_Deductions'];
    advancedPaidSalaryRecovery = json['Advanced_Paid_Salary_Recovery'];
    housingDeductionRecurring = json['Housing_Deduction_Recurring'];
    assignmentStatus = json['assignmentStatus'];
    totalDeduction = json['totalDeduction'];
    totalEarning = json['totalEarning'];
    payrollName = json['payrollName'];
    gradeName = json['gradeName'];
    assignmentCategory = json['assignmentCategory'];
    employeeCategory = json['employeeCategory'];
    contractType = json['contractType'];
    paymentMethod = json['paymentMethod'];
  }
}

extension SourceModelExtension on PayslipModel {
  PayslipEntity toPayslipEntity() {
    PayslipEntity payslipEntity = PayslipEntity();
    payslipEntity.isSuccess = isSuccess;
    payslipEntity.message = message;
    payslipEntity.userName = userName;
    payslipEntity.assignmentId = assignmentId;
    payslipEntity.personId = personId;
    payslipEntity.endDate = endDate;
    payslipEntity.deptname = deptname;
    payslipEntity.organizationId = organizationId;
    payslipEntity.employeeNumber = employeeNumber;
    payslipEntity.fullName = fullName;
    payslipEntity.dateStart = dateStart;
    payslipEntity.name = name;
    payslipEntity.workingDays = workingDays;
    payslipEntity.basicSalary = basicSalary;
    payslipEntity.supplementaryAllowance = supplementaryAllowance;
    payslipEntity.qualificationAllowance = qualificationAllowance;
    payslipEntity.childAllowance = childAllowance;
    payslipEntity.housingAllowance = housingAllowance;
    payslipEntity.nationalAllowance = nationalAllowance;
    payslipEntity.jobNature = jobNature;
    payslipEntity.costOfLivingAllowance = costOfLivingAllowance;
    payslipEntity.actingAllowance = actingAllowance;
    payslipEntity.furnitureAllowance = furnitureAllowance;
    payslipEntity.schoolAllowance = schoolAllowance;
    payslipEntity.ticketAllowance = ticketAllowance;
    payslipEntity.performanceAllowance = performanceAllowance;
    payslipEntity.transportationAllowance = transportationAllowance;
    payslipEntity.socialAllowance = socialAllowance;
    payslipEntity.overtimeMoney = overtimeMoney;
    payslipEntity.bonus = bonus;
    payslipEntity.otherAllowance = otherAllowance;
    payslipEntity.missionAllowance = missionAllowance;
    payslipEntity.missionLoan = missionLoan;
    payslipEntity.trainingCourseAllowance = trainingCourseAllowance;
    payslipEntity.advancedLeaveSalary = advancedLeaveSalary;
    payslipEntity.advancedLeaveSalaryRecovery = advancedLeaveSalaryRecovery;
    payslipEntity.employeePension = employeePension;
    payslipEntity.disciplinaryActionsDeductions = disciplinaryActionsDeductions;
    payslipEntity.overtime = overtime;
    payslipEntity.gratuityAllowance = gratuityAllowance;
    payslipEntity.scholarshipRecovery = scholarshipRecovery;
    payslipEntity.holdSalary = holdSalary;
    payslipEntity.releaseSalary = releaseSalary;
    payslipEntity.genericReimbursements = genericReimbursements;
    payslipEntity.specialPrivilages = specialPrivilages;
    payslipEntity.netPay = netPay;
    payslipEntity.supplementaryAllowanceForDifferences =
        supplementaryAllowanceForDifferences;
    payslipEntity.unpaidLeaveDeduction = unpaidLeaveDeduction;
    payslipEntity.otherDeductions = otherDeductions;
    payslipEntity.advancedPaidSalaryRecovery = advancedPaidSalaryRecovery;
    payslipEntity.housingDeductionRecurring = housingDeductionRecurring;
    payslipEntity.assignmentStatus = assignmentStatus;
    payslipEntity.totalDeduction = totalDeduction;
    payslipEntity.totalEarning = totalEarning;
    payslipEntity.payrollName = payrollName;
    payslipEntity.gradeName = gradeName;
    payslipEntity.assignmentCategory = assignmentCategory;
    payslipEntity.employeeCategory = employeeCategory;
    payslipEntity.contractType = contractType;
    payslipEntity.paymentMethod = paymentMethod;
    return payslipEntity;
  }
}
